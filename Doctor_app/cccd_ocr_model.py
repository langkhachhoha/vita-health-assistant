"""
CCCD OCR Model
M√¥-ƒëun tr√≠ch xu·∫•t th√¥ng tin t·ª´ ·∫£nh cƒÉn c∆∞·ªõc c√¥ng d√¢n s·ª≠ d·ª•ng FPT AI
"""

import base64
import json
import tempfile
import os
from openai import OpenAI
from pydantic import BaseModel, Field
from typing import Dict, Any, Optional
from dotenv import load_dotenv

# Load environment variables from .env file in parent directory
dir = os.getcwd()
load_dotenv(dotenv_path=os.path.join(dir, "Doctor_app", ".env"))

# C·∫•u h√¨nh API
BASE_URL = "https://api.together.xyz/v1"
FPT_API_KEY = os.getenv("TOGETHER_API_KEY")
MODEL_NAME = 'meta-llama/Llama-4-Scout-17B-16E-Instruct'

# Kh·ªüi t·∫°o client
client = OpenAI(
    api_key=FPT_API_KEY,
    base_url=BASE_URL
)


class CCCDInfo(BaseModel):
    """M√¥ h√¨nh d·ªØ li·ªáu th√¥ng tin CCCD"""
    id_number: str = Field(description="Citizen Identity Number")
    full_name: str = Field(description="Full name")
    date_of_birth: str = Field(description="Date of birth")
    sex: str = Field(description="Sex")
    nationality: str = Field(description="Nationality")
    place_of_origin: str = Field(description="Place of origin")
    place_of_residence: str = Field(description="Place of residence")


def encode_image_from_bytes(image_bytes: bytes) -> str:
    """M√£ h√≥a ·∫£nh t·ª´ bytes th√†nh base64"""
    return base64.b64encode(image_bytes).decode("utf-8")


def encode_image_from_path(image_path: str) -> str:
    """M√£ h√≥a ·∫£nh t·ª´ ƒë∆∞·ªùng d·∫´n th√†nh base64"""
    with open(image_path, "rb") as image_file:
        return base64.b64encode(image_file.read()).decode("utf-8")


def extract_cccd_info(image_data, is_file_path: bool = False) -> Dict[str, Any]:
    """
    Tr√≠ch xu·∫•t th√¥ng tin t·ª´ ·∫£nh CCCD
    
    Args:
        image_data: ƒê∆∞·ªùng d·∫´n file ho·∫∑c bytes c·ªßa ·∫£nh
        is_file_path: True n·∫øu image_data l√† ƒë∆∞·ªùng d·∫´n file, False n·∫øu l√† bytes
        
    Returns:
        Dict ch·ª©a th√¥ng tin tr√≠ch xu·∫•t ƒë∆∞·ª£c
    """
    try:
        # M√£ h√≥a ·∫£nh
        if is_file_path:
            base64_image = encode_image_from_path(image_data)
        else:
            base64_image = encode_image_from_bytes(image_data)
        
        # G·ªçi API ƒë·ªÉ tr√≠ch xu·∫•t th√¥ng tin
        extract = client.chat.completions.create(
            messages=[
                {
                    "role": "user",
                    "content": [
                        {
                            "type": "text", 
                            "text": (
                                "Tr√≠ch xu·∫•t ch√≠nh x√°c t·∫•t c·∫£ th√¥ng tin t·ª´ ·∫£nh cƒÉn c∆∞·ªõc c√¥ng d√¢n Vi·ªát Nam. "
                                "Tr·∫£ v·ªÅ th√¥ng tin b·∫±ng ti·∫øng Vi·ªát c√≥ d·∫•u ƒë·∫ßy ƒë·ªß. "
                                "N·∫øu kh√¥ng t√¨m th·∫•y th√¥ng tin n√†o, ƒë·ªÉ tr·ªëng."
                            )
                        },
                        {
                            "type": "image_url",
                            "image_url": {"url": f"data:image/jpeg;base64,{base64_image}"},
                        },
                    ],
                },
            ],
            model=MODEL_NAME,
            response_format={
                "type": "json_object",
                "schema": CCCDInfo.model_json_schema(),
            },
        )
        
        # Ph√¢n t√≠ch k·∫øt qu·∫£
        output = json.loads(extract.choices[0].message.content)
        


        values = list(output.values())

        # Chu·∫©n h√≥a d·ªØ li·ªáu
        normalized_data = {
            "so_cccd": values[0] if values[0] is not None else "",
            "ho_ten": values[1] if values[1] is not None else "",
            "ngay_sinh": values[2] if values[2] is not None else "",
            "gioi_tinh": values[3] if values[3] is not None else "",
            "quoc_tich": values[4] if values[4] is not None else "",
            "que_quan": values[5] if values[5] is not None else "",
            "noi_thuong_tru": values[6] if values[6] is not None else "",
        }
        
        return {
            "success": True,
            "data": normalized_data,
            "message": "Tr√≠ch xu·∫•t th√¥ng tin th√†nh c√¥ng"
        }
        
    except Exception as e:
        return {
            "success": False,
            "data": {},
            "message": f"L·ªói khi tr√≠ch xu·∫•t th√¥ng tin: {str(e)}"
        }


def extract_cccd_from_uploaded_file(uploaded_file) -> Dict[str, Any]:
    """
    Tr√≠ch xu·∫•t th√¥ng tin CCCD t·ª´ file upload c·ªßa Streamlit
    
    Args:
        uploaded_file: File upload object t·ª´ Streamlit
        
    Returns:
        Dict ch·ª©a th√¥ng tin tr√≠ch xu·∫•t ƒë∆∞·ª£c
    """
    try:
        # ƒê·ªçc bytes t·ª´ uploaded file
        image_bytes = uploaded_file.read()
        
        # Tr√≠ch xu·∫•t th√¥ng tin
        result = extract_cccd_info(image_bytes, is_file_path=False)
        
        return result
        
    except Exception as e:
        return {
            "success": False,
            "data": {},
            "message": f"L·ªói khi x·ª≠ l√Ω file upload: {str(e)}"
        }


def save_temp_image(uploaded_file) -> Optional[str]:
    """
    L∆∞u file upload v√†o th∆∞ m·ª•c t·∫°m th·ªùi
    
    Args:
        uploaded_file: File upload object t·ª´ Streamlit
        
    Returns:
        ƒê∆∞·ªùng d·∫´n file t·∫°m ho·∫∑c None n·∫øu l·ªói
    """
    try:
        # T·∫°o file t·∫°m
        temp_dir = tempfile.gettempdir()
        temp_filename = f"cccd_{uploaded_file.name}"
        temp_path = os.path.join(temp_dir, temp_filename)
        
        # L∆∞u file
        with open(temp_path, "wb") as f:
            f.write(uploaded_file.read())
            
        return temp_path
        
    except Exception as e:
        print(f"L·ªói khi l∆∞u file t·∫°m: {e}")
        return None


def test_extraction():
    """Test function ƒë·ªÉ ki·ªÉm tra tr√≠ch xu·∫•t th√¥ng tin"""
    test_image_path = os.path.join(dir, "image.jpeg")

    if os.path.exists(test_image_path):
        result = extract_cccd_info(test_image_path, is_file_path=True)
        
        print("=" * 60)
        print("K·∫æT QU·∫¢ TR√çCH XU·∫§T TH√îNG TIN CCCD")
        print("=" * 60)
        
        if result["success"]:
            print("‚úÖ Tr√≠ch xu·∫•t th√†nh c√¥ng!")
            print("\nüìã Th√¥ng tin chi ti·∫øt:")
            for key, value in result["data"].items():
                print(f"  {key}: {value}")
        else:
            print("‚ùå Tr√≠ch xu·∫•t th·∫•t b·∫°i!")
            print(f"L·ªói: {result['message']}")
            
        print("=" * 60)
        
        return result
    else:
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y file test: {test_image_path}")
        return None


if __name__ == "__main__":
    # Ch·∫°y test
    test_extraction()
