import os
import json
from datetime import datetime
from dotenv import load_dotenv
from openai import OpenAI
from flask import Flask, request, jsonify, Response
from flask_cors import CORS
import logging
from convert import convert_patient_data_to_text_segments

# Load environment variables
load_dotenv()

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Initialize Flask app
app = Flask(__name__)
CORS(app)

# OpenAI Configuration
BASE_URL = os.getenv('BASE_URL', 'https://mkp-api.fptcloud.com')
API_KEY = os.getenv('FPT_API_KEY')
MODEL_NAME = os.getenv('MODEL_NAME', 'gpt-oss-20b')

if not API_KEY:
    raise ValueError("API_KEY not found in environment variables")

client = OpenAI(api_key=API_KEY, base_url=BASE_URL)

def create_health_chatbot_system_prompt(patient_segments):
    """
    T·∫°o system prompt cho chatbot t∆∞ v·∫•n s·ª©c kh·ªèe c√° nh√¢n h√≥a
    """
    
    system_prompt = f"""B·∫†N L√Ä B√ÅC Sƒ® T∆Ø V·∫§N S·ª®C KH·ªéE TH√îNG MINH - Dr. HealthBot

üéØ VAI TR√í V√Ä NHI·ªÜM V·ª§:
B·∫°n l√† m·ªôt tr·ª£ l√Ω AI chuy√™n nghi·ªáp trong lƒ©nh v·ª±c y t·∫ø, c√≥ kh·∫£ nƒÉng t∆∞ v·∫•n s·ª©c kh·ªèe c√° nh√¢n h√≥a d·ª±a tr√™n th√¥ng tin b·ªánh nh√¢n ƒë∆∞·ª£c cung c·∫•p. B·∫°n c√≥ th·ªÉ tr·∫£ l·ªùi m·ªçi c√¢u h·ªèi v·ªÅ s·ª©c kh·ªèe, y t·∫ø v√† c√°c v·∫•n ƒë·ªÅ ƒë·ªùi s·ªëng, kh√¥ng ch·ªâ gi·ªõi h·∫°n trong th√¥ng tin c√° nh√¢n.

üìã TH√îNG TIN B·ªÜNH NH√ÇN HI·ªÜN T·∫†I:

{patient_segments.get('segment_1_personal_info', 'Ch∆∞a c√≥ th√¥ng tin c√° nh√¢n')}

{patient_segments.get('segment_2_lifestyle_health', 'Ch∆∞a c√≥ th√¥ng tin l·ªëi s·ªëng')}

{patient_segments.get('segment_3_health_metrics', 'Ch∆∞a c√≥ ch·ªâ s·ªë s·ª©c kh·ªèe')}

{patient_segments.get('segment_4_ai_analysis', 'Ch∆∞a c√≥ ph√¢n t√≠ch AI')}

{patient_segments.get('segment_5_doctor_recommendations', 'Ch∆∞a c√≥ khuy·∫øn ngh·ªã b√°c sƒ©')}

üîç NGUY√äN T·∫ÆC HO·∫†T ƒê·ªòNG:

1. **T∆Ø V·∫§N C√Å NH√ÇN H√ìA:**
   - Khi ƒë∆∞·ª£c h·ªèi v·ªÅ s·ª©c kh·ªèe c√° nh√¢n, LU√îN tham kh·∫£o th√¥ng tin b·ªánh nh√¢n ƒë√£ cung c·∫•p
   - ƒê∆∞a ra l·ªùi khuy√™n ph√π h·ª£p v·ªõi tu·ªïi, gi·ªõi t√≠nh, BMI, t√¨nh tr·∫°ng s·ª©c kh·ªèe hi·ªán t·∫°i
   - K·∫øt h·ª£p k·∫øt qu·∫£ ph√¢n t√≠ch AI v√† khuy·∫øn ngh·ªã c·ªßa b√°c sƒ© ƒë√£ c√≥

2. **T∆Ø V·∫§N T·ªîNG QU√ÅT:**
   - V·ªõi c√°c c√¢u h·ªèi y t·∫ø chung, tr·∫£ l·ªùi d·ª±a tr√™n ki·∫øn th·ª©c y h·ªçc hi·ªán ƒë·∫°i
   - Kh√¥ng b·∫Øt bu·ªôc ph·∫£i s·ª≠ d·ª•ng th√¥ng tin c√° nh√¢n n·∫øu c√¢u h·ªèi mang t√≠nh t·ªïng qu√°t
   - Cung c·∫•p th√¥ng tin ch√≠nh x√°c, khoa h·ªçc v√† d·ªÖ hi·ªÉu

3. **AN TO√ÄN V√Ä CHUY√äN NGHI·ªÜP:**
   - KH√îNG t·ª± ch·∫©n ƒëo√°n ho·∫∑c k√™ ƒë∆°n thu·ªëc
   - Lu√¥n khuy·∫øn ngh·ªã g·∫∑p b√°c sƒ© chuy√™n khoa khi c·∫ßn thi·∫øt
   - ƒê∆∞a ra c·∫£nh b√°o ph√π h·ª£p v·ªÅ c√°c tri·ªáu ch·ª©ng nghi√™m tr·ªçng

üé® PHONG C√ÅCH GIAO TI·∫æP:
- Th√¢n thi·ªán, ·∫•m √°p nh∆∞ m·ªôt b√°c sƒ© gia ƒë√¨nh
- S·ª≠ d·ª•ng ti·∫øng Vi·ªát t·ª± nhi√™n, d·ªÖ hi·ªÉu
- Gi·∫£i th√≠ch thu·∫≠t ng·ªØ y khoa khi c·∫ßn thi·∫øt
- ƒê·ªông vi√™n v√† t√≠ch c·ª±c
- S·ª≠ d·ª•ng emoji ph√π h·ª£p ƒë·ªÉ t·∫°o kh√¥ng kh√≠ th√¢n thi·ªán

üìù C·∫§U TR√öC PH·∫¢N H·ªíI:
1. **L·ªùi ch√†o/Th·ªÉ hi·ªán s·ª± quan t√¢m**
2. **Ph√¢n t√≠ch c√¢u h·ªèi v√† li√™n k·∫øt v·ªõi th√¥ng tin c√° nh√¢n (n·∫øu c√≥)**
3. **ƒê∆∞a ra l·ªùi khuy√™n c·ª• th·ªÉ v√† th·ª±c t·∫ø**
4. **C·∫£nh b√°o an to√†n (n·∫øu c·∫ßn)**
5. **ƒê·ªông vi√™n v√† ƒë·ªÅ xu·∫•t b∆∞·ªõc ti·∫øp theo**

‚ö†Ô∏è GI·ªöI H·∫†N V√Ä L∆ØU √ù:
- Kh√¥ng thay th·∫ø vi·ªác kh√°m b√°c sƒ© tr·ª±c ti·∫øp
- V·ªõi tri·ªáu ch·ª©ng c·∫•p t√≠nh ho·∫∑c nghi√™m tr·ªçng, ∆∞u ti√™n khuy·∫øn ngh·ªã ƒë·∫øn c∆° s·ªü y t·∫ø
- Th√¥ng tin ch·ªâ mang t√≠nh tham kh·∫£o v√† gi√°o d·ª•c
- T√¥n tr·ªçng quy·ªÅn ri√™ng t∆∞ v√† b·∫£o m·∫≠t th√¥ng tin b·ªánh nh√¢n

üîÑ X·ª¨ L√ù C√ÅC T√åNH HU·ªêNG:
- **C√¢u h·ªèi v·ªÅ t√¨nh tr·∫°ng c√° nh√¢n:** Tham kh·∫£o ƒë·∫ßy ƒë·ªß 5 ƒëo·∫°n th√¥ng tin
- **C√¢u h·ªèi y t·∫ø t·ªïng qu√°t:** Tr·∫£ l·ªùi d·ª±a tr√™n ki·∫øn th·ª©c chuy√™n m√¥n
- **C√¢u h·ªèi ngo√†i y t·∫ø:** Tr·∫£ l·ªùi l·ªãch s·ª± v√† chuy·ªÉn h∆∞·ªõng v·ªÅ s·ª©c kh·ªèe n·∫øu ph√π h·ª£p
- **Th√¥ng tin kh√¥ng r√µ r√†ng:** Y√™u c·∫ßu l√†m r√µ m·ªôt c√°ch nh·∫π nh√†ng

H√£y b·∫Øt ƒë·∫ßu cu·ªôc tr√≤ chuy·ªán b·∫±ng vi·ªác ch√†o h·ªèi th√¢n thi·ªán v√† s·∫µn s√†ng h·ªó tr·ª£ b·ªánh nh√¢n v·ªÅ m·ªçi v·∫•n ƒë·ªÅ s·ª©c kh·ªèe!"""
    print(system_prompt)
    return system_prompt

import os
dir = os.getcwd()

def load_patient_data():
    """Load d·ªØ li·ªáu b·ªánh nh√¢n t·ª´ file JSON"""
    try:
        json_file_path = os.path.join(dir, 'Doctor_app', 'patient_data.json')
        if os.path.exists(json_file_path):
            patient_segments = convert_patient_data_to_text_segments(json_file_path)
            if 'error' in patient_segments:
                logger.error(f"Error loading patient data: {patient_segments['error']}")
                return None
            return patient_segments
        else:
            logger.warning("Patient data file not found")
            return None
    except Exception as e:
        logger.error(f"Error loading patient data: {e}")
        return None

@app.route('/health', methods=['GET'])
def health_check():
    """Health check endpoint"""
    return jsonify({
        "status": "healthy",
        "timestamp": datetime.now().isoformat(),
        "model": MODEL_NAME
    })

@app.route('/chat', methods=['POST'])
def chat():
    """Chat endpoint for health consultation"""
    try:
        data = request.get_json()
        
        if not data or 'messages' not in data:
            return jsonify({"error": "Missing messages in request"}), 400
        
        messages = data['messages']
        stream = data.get('stream', False)
        
        # Load patient data and create system prompt
        patient_segments = load_patient_data()
        
        if patient_segments:
            system_prompt = create_health_chatbot_system_prompt(patient_segments)
        else:
            system_prompt = """B·∫°n l√† Dr. HealthBot - tr·ª£ l√Ω t∆∞ v·∫•n s·ª©c kh·ªèe AI. 
            Hi·ªán ch∆∞a c√≥ th√¥ng tin b·ªánh nh√¢n c·ª• th·ªÉ. 
            H√£y t∆∞ v·∫•n d·ª±a tr√™n ki·∫øn th·ª©c y h·ªçc chung v√† khuy·∫øn ngh·ªã b·ªánh nh√¢n cung c·∫•p th√¥ng tin c√° nh√¢n ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n t·ªët h∆°n."""
        
        # Prepare messages for API
        api_messages = [{"role": "system", "content": system_prompt}]
        api_messages.extend(messages)
        
        if stream:
            def generate():
                try:
                    response = client.chat.completions.create(
                        model=MODEL_NAME,
                        messages=api_messages,
                        temperature=0.7,
                        top_p=0.9,
                        max_tokens=2048,
                        stream=True
                    )
                    
                    for chunk in response:
                        if chunk.choices and chunk.choices[0].delta and hasattr(chunk.choices[0].delta, 'content'):
                            if chunk.choices[0].delta.content:
                                yield f"data: {json.dumps({'content': chunk.choices[0].delta.content})}\n\n"
                    
                    yield f"data: {json.dumps({'content': '[DONE]'})}\n\n"
                    
                except Exception as e:
                    logger.error(f"Error in streaming response: {e}")
                    yield f"data: {json.dumps({'error': str(e)})}\n\n"
            
            return Response(generate(), mimetype='text/plain')
        
        else:
            # Non-streaming response
            response = client.chat.completions.create(
                model=MODEL_NAME,
                messages=api_messages,
                temperature=0.7,
                top_p=0.9,
                max_tokens=1024
            )
            
            return jsonify({
                "content": response.choices[0].message.content,
                "usage": response.usage.dict() if hasattr(response, 'usage') else None
            })
            
    except Exception as e:
        logger.error(f"Error in chat endpoint: {e}")
        return jsonify({"error": str(e)}), 500

@app.route('/patient-info', methods=['GET'])
def get_patient_info():
    """Get current patient information"""
    try:
        patient_segments = load_patient_data()
        if patient_segments:
            return jsonify({
                "status": "success",
                "data": patient_segments
            })
        else:
            return jsonify({
                "status": "no_data",
                "message": "No patient data available"
            })
    except Exception as e:
        logger.error(f"Error getting patient info: {e}")
        return jsonify({"error": str(e)}), 500

if __name__ == '__main__':
    logger.info("Starting Dr. HealthBot Server...")
    logger.info(f"Model: {MODEL_NAME}")
    logger.info(f"Base URL: {BASE_URL}")
    
    port = int(os.getenv('CHATBOT_SERVER_PORT', 8502))
    host = os.getenv('CHATBOT_SERVER_HOST', 'localhost')
    
    app.run(host=host, port=port, debug=True)
